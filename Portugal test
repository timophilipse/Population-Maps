library(sf)
library(ggplot2)
library(dplyr)
library(tidyverse)
options(rgl.debug = TRUE)
library(rgl)
library(tigris)
library(stars)
library(MetBrewer)
library(colorspace)
library(remotes)
library(rayshader)
library(rayrender)
library(spData)
library(rnaturalearth)
library(beepr)
library(NatParksPalettes)
library(glue)
remotes::install_github("tylermorganwall/rayshader")
remotes::install_github("tylermorganwall/rayrender")

data <- st_read("data/kontur_population_PT_20231101.gpkg")

map <- "por"



por <- raster::getData('GADM', country= "PRT", level = 1)|>
  st_as_sf()|>
  st_transform(crs = st_crs(data))
beep(3)

mainpor|>
  ggplot()+
  geom_sf()
mainpor <- por |> filter(TYPE_1 == "Distrito")
st_d <- st_intersection(data,mainpor)

bb <- st_bbox(st_d)

yind <- st_distance(st_point(c(bb[["xmin"]], bb[["ymin"]])), 
                    st_point(c(bb[["xmin"]], bb[["ymax"]])))
xind <- st_distance(st_point(c(bb[["xmin"]], bb[["ymin"]])), 
                    st_point(c(bb[["xmax"]], bb[["ymin"]])))

if (yind > xind) {
  y_rat <- 1
  x_rat <- xind / yind
} else {
  x_rat <- 1
  y_rat <- yind / xind
}

size<- 6000
rast <- st_rasterize(st_d|> 
                       dplyr::select(population, geom),
                     nx = floor(size * x_rat), ny = floor(size * y_rat))

mat <- matrix(rast$population, 
              nrow = floor(size * x_rat),
              ncol = floor(size * y_rat))

pal <- "acadia"

c1 <- natparks.pals(name = "Acadia", n = 10)
colors <- c1[c(5:1, 10:6)]
swatchplot(colors)

texture <- grDevices::colorRampPalette(colors, bias = 2.5)(256)

swatchplot(texture)

pal <- "hiroshige"
c1 <- met.brewer("Acadia")
colors <- c1[c(5:1, 10:6)] |> rev()
swatchplot(colors)

texture <- grDevices::colorRampPalette(colors, bias = 1.2)(256)
try(rgl::rgl.close())
mat |> 
  height_shade(texture = texture) |> 
  plot_3d(heightmap = mat, 
          solid = FALSE,
          soliddepth = 0,
          z = 25,
          shadowdepth = 0,
          windowsize = c(800,800), 
          phi = 45, 
          zoom = 0.9, 
          theta = -10, 
          background = "white") 


render_camera(phi = 45, zoom = .9, theta = 0)

outfile<- "images/porttest.png"

{
  # Test write a PNG to ensure the file path is good.
  # You don't want `render_highquality()` to fail after it's 
  # taken hours to render.
  if (!file.exists(outfile)) {
    png::writePNG(matrix(1), outfile)
  }
  # I like to track when I start the render
  start_time <- Sys.time()
  cat(glue("Start Time: {start_time}"), "\n")
  render_highquality(
    filename = outfile,
    interactive = FALSE,
    lightdirection = rev(c(140, 140, 150, 150)),
    lightcolor = c(colors[3], "white", colors[7], "white"),
    lightintensity = c(750, 100, 1000, 100),
    lightaltitude = c(10, 80, 10, 80),
    width = 8000,
    height = 8000)
  end_time <- Sys.time()
  cat(glue("Total time: {end_time - start_time}"), "\n")
}


{
  # Test write a PNG to ensure the file path is good.
  # You don't want `render_highquality()` to fail after it's 
  # taken hours to render.
  if (!file.exists(outfile)) {
    png::writePNG(matrix(1), outfile)
  }
  # I like to track when I start the render
  start_time <- Sys.time()
  cat(glue("Start Time: {start_time}"), "\n")
  render_highquality(
    # We test-wrote to this file above, so we know it's good
    outfile, 
    # See rayrender::render_scene for more info, but best
    # sample method ('sobol') works best with values over 256
    samples = 450, 
    preview = FALSE,
    light = TRUE,
    lightdirection = rev(c(145, 145, 150, 150)),
    lightcolor = c(colors[3], "white", colors[7], "white"),
    lightintensity = c(750, 50, 1000, 50),
    lightaltitude = c(10, 80, 10, 80),
    # All it takes is accidentally interacting with a render that takes
    # hours in total to decide you NEVER want it interactive
    interactive = FALSE,
    # HDR lighting used to light the scene
    # environment_light = "assets/env/phalzer_forest_01_4k.hdr",
    # # environment_light = "assets/env/small_rural_road_4k.hdr",
    # # Adjust this value to brighten or darken lighting
    # intensity_env = 1.5,
    # # Rotate the light -- positive values move it counter-clockwise
    # rotate_env = 130,
    # This effectively sets the resolution of the final graphic,
    # because you increase the number of pixels here.
    # width = round(6000 * wr), height = round(6000 * hr),
    width = 10000, height = 10000,
    ground_material = rayrender::microfacet(roughness = .4,
                                            eta = c(1, .75, .1), 
                                            kappa = c(.1, .75, 1))
  )
  end_time <- Sys.time()
  cat(glue("Total time: {end_time - start_time}"), "\n")
}
